{
  description = "jekyll site";

  inputs = {
    nixpkgs.url = "nixpkgs";
    flake-utils.url = "github:numtide/flake-utils";
    nix-filter.url = "github:numtide/nix-filter";
  };

  outputs = { self, nixpkgs, flake-utils, nix-filter }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        overlays = [
          (self: super: {
            ruby = pkgs.ruby_3_1;
          })
        ];
        pkgs = import nixpkgs { inherit overlays system; };

        rubyEnv = pkgs.bundlerEnv {
          # The full app environment with dependencies
          name = "rails-env";
          inherit (pkgs) ruby;
          gemdir = ./.; # Points to Gemfile.lock and gemset.nix
          siteDir = ./test_site;
        };
        site_dir = pkgs.lib.fileset.toSource {
          root = ./.;
          fileset = ./test_site;
        };
	nginxConf = pkgs.writeText "nginx.conf" ''
	user  nobody nobody;
      	daemon off;
      	error_log /dev/stdout info;
      	pid /dev/null;
      	events {}
      	http {
        access_log /dev/stdout;
	
        server {
          listen 80;
	  server_name localhost;  
          location / {
            proxy_pass http://127.0.0.1:4000;
          }
        }
      }
    '';




#        updateDeps = pkgs.writeScriptBin "update-deps" (builtins.readFile
#          (pkgs.substituteAll {
#            src = ./scripts/update.sh;
#            bundix = "${pkgs.bundix}/bin/bundix";
#            bundler = "${rubyEnv.bundler}/bin/bundler";
#          }));
      in
      {
        apps.default = {
          type = "app";
          program = "${rubyEnv}/bin/rails";
        };

        devShells = rec {
          default = run;

          run = pkgs.mkShell {
            buildInputs = [ rubyEnv rubyEnv.wrappedRuby ]; # updateDeps ];

            shellHook = ''
              ${rubyEnv}/bin/jekyll serve --watch
            '';
#              shellHook = ''
#              exec ${jekyll_env}/bin/jekyll serve --watch
#              '';
          };
        };

        packages = {
          default = rubyEnv;

#          docker = pkgs.dockerTools.buildImage {
          docker = pkgs.dockerTools.buildLayeredImage {
            name = "jekyll-site";
            tag = "latest";
#            copyToRoot = pkgs.buildEnv {
#            name = "siteDir";
#            pathsToLink = ["${jekyll_env}/test_site" "/test_site"];
#            paths = [ ./.]; # ./. not ./hello.sh
#            };
            contents = [
                site_dir
#		pkgs.nginx
#		pkgs.bash
#    		pkgs.fakeNss
#    		pkgs.coreutils
#    		pkgs.gnugrep
           ];
            fromImage = pkgs.dockerTools.pullImage {
              imageName = "ubuntu";
              finalImageTag = "20.04";
              imageDigest = "sha256:a06ae92523384c2cd182dcfe7f8b2bf09075062e937d5653d7d0db0375ad2221";
              sha256 = "sha256-d249m1ZqcV72jfEcHDUn+KuOCs8WPaBJRcZotJjVW0o=";
            };
#            extraCommands = ''
#	                mkdir -p var/log/nginx var/cache/nginx 
#                        mkdir -p tmp/nginx_client_body
#	                ${rubyEnv}/bin/jekyll serve -s ./test_site --watch --host 0.0.0.0 &
#			${pkgs.nginx}/bin/nginx -c ${nginxConf}
#            '';
            config.Cmd = [ "${rubyEnv}/bin/jekyll" "serve" "-s" "./test_site" "--watch" "--host" "0.0.0.0"];
#            config.Cmd = ["${rubyEnv}/bin/jekyll" "serve" "-s" "./test_site" "--watch" "--host" "0.0.0.0" "&&" "${pkgs.nginx}/bin/nginx" "-c" "${nginxConf}"] ;
	    config.ExposedPorts = {"4000/tcp" = {};};
#	    config.ExposedPorts = {"4000/tcp" = {}; "80/tcp" = {};};
          };
        };
      });
}
